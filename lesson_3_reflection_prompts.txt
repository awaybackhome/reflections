When would you want to use a remote repository rather than keeping all your work
local?

    When you have to change workstations or when working with others.
    
Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    It's a way to stay more organized in module form. Although git commit should
    do this for you, you wouldn't want your workspace being modified by others
    while you work on something.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    A fork is an easy way to start working on someone's rep on github as your own. You
    would clone someone's rep on github first. Then you would make it your remote in git.
    You could then work on the forked clone as your own.

    Branches are commits that divide off from the master. Branches are kind of like forks,
    but in a conceptually larger way. A branch is used to break off from the master and
    for ex. work on your own idea. The same can be said for a fork. If you clone a rep, but
    are not allowed to work on it. You can work on your forked clone aside from the original
    author's. 

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Not only can you see what others have added, you can merge that into your master and
    update the remote origin. It can also show you how much progress has been made since,
    you personally worked on the repository.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Git or Github creates more independence and saves time. You can work independently,
    yet maintain organization to keep progress neat and steady. WIth github, you would
    just quickly divide sections of work or indicate which bug you'll work on and get 
    to it. Without this device, it would be a barrage of constant calls and emails, 
    sharing of files. This device also allows a greater amount of people to work on a
    project. It allows for economies of scale opposed to diseconomies of scale without
    github.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Master is all about maintaining a working copy, so you'd most likely be fixing bugs
    as they are discovered in master or working towards an end goal by adding the next
    planned module. A separate branch would be for those times someone gets a new idea.
    If you want to experiment or improve upon an already working module in the code, or
    even shift the paradiagm of code in a new direction, a branch would be the best way
    to go. 
