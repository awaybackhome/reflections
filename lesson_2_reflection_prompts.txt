What happens when you initialize a repository? Why do you need to do it?
	
	When you initialize a repository, you are activating it as a git
	repository. However, this does that mean any files are being tracked
	at this point. This just means, you have created a working directory.
	Without initialization, you will not be able, however, to
	track commits ie -- add commits to your repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?
	
	The staging area is an area where you can select certain files you want
	to include in the commit that will be sent to the repository.
	This differs from the working area where you see and interact with the files
	in a directory. Not all files need to be tracked and thus removed from the 
	repository or commit in git. If you were to clone the git, only the files that
	made it to the staging area would be included. This offers more control and
	organization over what you with to commit. 

How can you use the staging area to make sure you have one commit per logical change?

	Your staging area shows you everything that will commit. You can review what's there
	to ensure it is relevant to only one logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches are most useful for experimenting with new ideas but maintaining a working
	copy.

How do the diagrams help you visualize the branch structure?
	Well, a diagram can show you where the branches are and which aren't
	accessible. But for some reasons on my asteroid git, there were no
	branches.... even when I used git log --graph and even --oneline

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	My result was a conflict but I resolved it. It was good because lesson 3 allowed
	me to learn how to understand conflicts and fix them. 

	Merging branches sifts through code and removes what is clearly unnecessary, 
	adds anything new,
	and questions you about conflicting lines of code.

	If you're refering to --graph, I guess it's representing in the diagram 
	in such a way to demonstrate clarity. To show what previous commits are 
	added into where.

	On the coursework graph, it's to show merge's function in relation 
	to commit and branch. A merge becomes a new branch and new commit once completed.  

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	So far, I haven't seen the real cons of automatic merging since it's a conservative
	function. It only automatically updates areas that are obstensibly new or removed.
	Any areas that confict with this are brought to the user's attention to manually
	adjust. To do a merge completely manually would be tidious, but possibly better for
	code review. Then again, it can open up the possibility for more human error.

	Concl: Merge is a beautiful feature. 
	